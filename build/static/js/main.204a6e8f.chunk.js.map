{"version":3,"sources":["services/blogs.js","components/Blog.js","components/BlogForm.js","components/LoginForm.js","utils/styles.js","components/Notification.js","components/WelcomeMessage.js","components/Togglable.js","services/users.js","components/NewUserForm.js","services/login.js","App.js","index.js"],"names":["token","axios","get","then","response","data","newToken","newObject","config","headers","Authorization","post","title","author","url","updatedObject","put","concat","id","object","delete","Blog","blog","updateBlogs","notification","useState","showHidden","setShowHidden","incrementLikes","a","likes","blogService","handleDelete","window","confirm","hiddenInfo","display","style","borderStyle","paddingTop","paddingLeft","marginBottom","onClick","BlogForm","props","type","name","value","titleState","onChange","target","setTitle","authorState","setAuthor","urlState","setUrl","onSubmit","LoginForm","usernameState","usernameFunction","passwordState","passwordFunction","messageStyle","color","background","fontSize","borderRadius","padding","Notification","message","errorStyle","console","log","styleToUse","welcomeMessage","Togglable","visible","setVisible","hideWhenVisible","showWhenVisible","toggleVisibility","buttonLabel","children","newUser","credentials","NewUserForm","setNewUser","newName","setNewName","newPassword","setNewPassword","handleNewUser","event","preventDefault","userCredentials","username","password","userService","login","App","blogs","setBlogs","setUsername","setPassword","user","setUser","setNotification","loginVisible","setLoginVisible","blogformVisible","setBlogformVisible","timeoutNotification","time","setTimeout","updatedBlogs","sort","b","useEffect","JSON","parse","localStorage","getItem","clearLoginBox","handleLogin","loginService","setItem","stringify","handleLogout","removeItem","clearNewBlogBox","saveBlog","newBlog","result","handleNewBlog","returnedBlogs","map","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.204a6e8f.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = '/api/blogs'\r\n\r\nlet token;\r\n\r\nconst setToken = (newToken) =>{\r\n  token = `bearer ${newToken}`\r\n  \r\n}\r\nconst generateBlog = (title, author, url) =>{\r\n  return {\r\n    title: title,\r\n    author:author,\r\n    url:url\r\n  }\r\n}\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n  const config = {\r\n    headers:\r\n    {Authorization:token}\r\n  }\r\n  const request = axios.post(baseUrl, newObject, config)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (updatedObject) =>{\r\n  const request = axios.put(baseUrl.concat(`/${updatedObject.id}`), updatedObject)\r\n  return request.then(response =>response.data)\r\n}\r\n\r\nconst remove = (object) =>{\r\n  const config = {\r\n    headers:\r\n    {Authorization:token}\r\n  }\r\n  const request = axios.delete(baseUrl.concat(`/${object.id}`), config)\r\n  return request.then(response => response.data)\r\n}\r\nexport default { getAll, setToken, create, generateBlog, update, remove }","import React from 'react'\r\nimport { useState } from \"react\"\r\nimport blogService from \"../services/blogs\"\r\n\r\nconst Blog = ({ blog, updateBlogs, notification }) => {\r\n\r\n  const [showHidden, setShowHidden] = useState(false)\r\n  \r\n  const incrementLikes = async () =>{\r\n    blog.likes = blog.likes + 1\r\n    await blogService.update(blog)\r\n    //below is an easy way to update hidden info without rerendering whole page - closes hidden info box and reopens with correct info\r\n    setShowHidden(false)\r\n    setShowHidden(true)\r\n  }\r\n\r\n  const handleDelete = async () =>{\r\n    try{\r\n      if (window.confirm(`Are you sure you want to remove ${blog.title}?`)){\r\n        await blogService.remove(blog)\r\n        updateBlogs()\r\n        notification([\"Message\", \"Blog successfully deleted\"], 3000)\r\n      }\r\n    }catch(exception){\r\n      notification([\"Error\", \"Only the blogs creator may delete it\"], 3000)\r\n  }\r\n}\r\n\r\n  const blogStyle = {borderStyle:\"groove\",\r\n  paddingTop: 10,\r\n  paddingLeft: 2,\r\n  marginBottom:5}\r\n\r\n  const hiddenInfo = {display: showHidden? \"\": \"none\"}\r\n\r\n    return(\r\n    <div style = {blogStyle}>\r\n      <p>Title: {blog.title}</p>\r\n      <p>Author: {blog.author}</p>\r\n      <button\r\n        onClick = {()=>setShowHidden(!showHidden)}>\r\n        {showHidden? \"Hide info\" : \"Show info\"}\r\n      </button>\r\n      <div style = {hiddenInfo}>\r\n        <p>Likes: {blog.likes}</p>\r\n        <button onClick = {incrementLikes}>like</button>\r\n        <p>Url: {blog.url}</p>\r\n        <button onClick = {handleDelete}>\r\n          Delete blog?\r\n        </button>\r\n      </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Blog\r\n","import React from \"react\"\r\n\r\nconst BlogForm = (props) =>{\r\n\r\n\r\n\r\n        return(\r\n        <div>\r\n        <h1>Add a new Blog</h1>\r\n        <form>\r\n        <div>\r\n            <div>\r\n            title:\r\n                <input type = \"text\"\r\n                name = \"title\"\r\n                value = {props.titleState}\r\n                onChange = {({target}) => props.setTitle(target.value)}\r\n                ></input>\r\n            </div>\r\n            <div>\r\n            author:\r\n                <input type = \"text\"\r\n                name = \"author\"\r\n                value = {props.authorState}\r\n                onChange = {({target}) =>props.setAuthor(target.value)}\r\n                />\r\n\r\n            </div>\r\n            <div>\r\n            url:\r\n                <input type = \"text\"\r\n                name = \"url\"\r\n                value = {props.urlState}\r\n                onChange = {({target}) =>props.setUrl(target.value)}\r\n                />\r\n            </div>\r\n                <button type = \"submit\"\r\n                onClick = {props.onSubmit}>\r\n                create\r\n                </button>\r\n        </div>\r\n        </form>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default BlogForm\r\n\r\n","import React from \"react\"\r\n\r\nconst LoginForm = (props) =>{\r\n\r\n\r\n      return(\r\n      <form>\r\n      <div>\r\n          <h2>login</h2>\r\n          username\r\n          <div>\r\n            <input type = \"text\"\r\n            value = {props.usernameState}\r\n            name = \"username\"\r\n            onChange = {({target})=>props.usernameFunction(target.value)}>\r\n            </input>\r\n          </div>\r\n          password\r\n          <div>\r\n            <input type = \"password\"\r\n            value = {props.passwordState}\r\n            name = \"password\"\r\n            onChange = {({target}) =>props.passwordFunction(target.value)}>\r\n            </input>\r\n          </div>\r\n          <button type = \"submit\"\r\n          onClick = {props.onSubmit}>\r\n              login\r\n          </button>\r\n      </div>\r\n      </form>\r\n      )\r\n    \r\n}\r\n\r\n\r\nexport default LoginForm ","const messageStyle = {\r\n    color:\"green\",\r\n    background:\"lightgrey\",\r\n    fontSize:16,\r\n    borderStyle:\"solid\",\r\n    borderRadius:5,\r\n    padding:10,\r\n    marginBottom:10\r\n}\r\n\r\nexport default messageStyle","import React from \"react\"\r\nimport messageStyle from \"../utils/styles\"\r\n\r\nconst Notification = (props) =>{\r\n    let message = props.message[1]\r\n    let type = props.message[0]\r\n\r\n    if (message === null){\r\n        return null\r\n    }else if (typeof message === \"string\"){\r\n    const errorStyle = {\r\n        ...messageStyle,\r\n        color:\"red\"\r\n    }\r\n    console.log(message)\r\n    const styleToUse = (\r\n        type === \"Error\"?\r\n        errorStyle \r\n        :\r\n        messageStyle\r\n    )\r\n\r\n    return (\r\n        <div style = {styleToUse}>\r\n            <h1>{message}</h1>\r\n        </div>\r\n    )\r\n    \r\n    }\r\n}\r\n\r\nexport default Notification","\r\n\r\nconst welcomeMessage = [\r\n        \r\n        \"Hello, and welcome! :) \\n\" ,\r\n        \"This small web app was set up to demonstrate password hashing, user token authentication, and basic server requests. \\n\" ,\r\n        \"Use credentials User1, password: 111 to log in and get started - your browser will remember your session if you reload the page. \\n\" ,\r\n        \"Alternatively, use the create new user button to store your own credentials. \\n\"+\r\n        \"Blogs can only be deleted by the user that created them. \\n\" +\r\n        \"Blogs are listed in order of number of likes \\n\" \r\n\r\n]\r\n\r\n\r\nexport default welcomeMessage","import { useState } from \"react\"\r\nimport React from \"react\"\r\nimport welcomeMessage from \"./WelcomeMessage\"\r\n\r\nconst Togglable = (props) =>{\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const hideWhenVisible = {display: visible? \"none\" : \"\"}\r\n    const showWhenVisible = {display: visible? \"\": \"none\"}\r\n\r\n    const toggleVisibility = () =>{\r\n        setVisible(!visible)\r\n    }\r\n    const welcome = () =>{\r\n        if (props.buttonLabel === \"login\"){\r\n            return welcomeMessage\r\n        }else {\r\n            return null\r\n        }\r\n    }\r\n    return(\r\n        <>\r\n        <div style = {hideWhenVisible}>\r\n            {welcome()}\r\n            <div>\r\n            <button onClick = {toggleVisibility}>{props.buttonLabel}</button>\r\n            </div>\r\n        </div>\r\n        <div style = {showWhenVisible}>\r\n            {props.children}\r\n            <button onClick = {toggleVisibility}>\r\n                cancel\r\n            </button>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\nexport default Togglable","import axios from \"axios\"\r\nconst baseUrl = \"/api/users\"\r\n\r\nconst newUser = async (credentials) =>{\r\n    const response = await axios.post(baseUrl, credentials)\r\n    return response.data\r\n}\r\n\r\nexport default  { newUser }","import React from \"react\"\r\nimport { useState } from \"react\"\r\nimport userService from \"../services/users\"\r\n\r\nconst NewUserForm = ({notification}) =>{\r\n    \r\n    const [newUser, setNewUser] = useState(\"\")\r\n    const [newName, setNewName] = useState(\"\")\r\n    const [newPassword, setNewPassword] = useState(\"\")\r\n\r\n    const handleNewUser = async (event) =>{\r\n        event.preventDefault()\r\n        try{\r\n        const userCredentials = {\r\n            username:newUser,\r\n            name:newName,\r\n            password:newPassword\r\n        }\r\n        await userService.newUser(userCredentials)\r\n        notification([\"Message\",`${newUser} account created`], 3000)\r\n        setNewUser(\"\")\r\n        setNewName(\"\")\r\n        setNewPassword(\"\")\r\n    }catch (exception){\r\n        notification([\"Error\", `unable to create account`], 3000)\r\n    }\r\n    }\r\n    return (\r\n        <div>\r\n            <p>WARNING - this web app is intended for demonstration purposes only</p>\r\n            <p>Although passwords are hashed and not stored in plain text, it is STRONGLY advised not to enter any username/password that you use on any other site </p>\r\n            <p>username and password must both be at least 3 characters long for heightened security (lol) and username must be unique</p>\r\n            <form>\r\n                <div>\r\n                    Username:\r\n                    <input type = \"text\"\r\n                    name = \"username\"\r\n                    value = {newUser}\r\n                    onChange = {({target}) => setNewUser(target.value)}>\r\n                    </input>\r\n                </div>\r\n                <div>\r\n                    Name:\r\n                    <input type = \"text\"\r\n                    name = \"name\"\r\n                    value = {newName}\r\n                    onChange = {({target}) =>setNewName(target.value)}>\r\n                    </input>\r\n                </div>\r\n                <div>\r\n                    Password:\r\n                    <input type = \"password\"\r\n                    name = \"password\"\r\n                    value = {newPassword}\r\n                    onChange = {({target}) =>setNewPassword(target.value)}>\r\n                    </input>\r\n                </div>\r\n                <button type = \"submit\"\r\n                onClick = {handleNewUser}>\r\n                    create account\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default NewUserForm","import axios from \"axios\"\r\nconst baseUrl = \"/api/login\"\r\n\r\nconst login = async (credentials) =>{\r\n    const response = await axios.post(baseUrl, credentials)\r\n    return response.data\r\n}\r\n\r\n\r\nexport default { login }\r\n","import React, { useState, useEffect } from 'react'\r\nimport Blog from './components/Blog'\r\nimport BlogForm from \"./components/BlogForm\"\r\nimport LoginForm from \"./components/LoginForm\"\r\nimport Notification from \"./components/Notification\"\r\nimport Togglable from \"./components/Togglable\"\r\nimport NewUserForm from \"./components/NewUserForm\"\r\nimport loginService from \"./services/login\"\r\nimport blogService from './services/blogs'\r\n\r\nconst App = () => {\r\n  const [blogs, setBlogs] = useState([])\r\n  //below three for creation of new blogs ***REFACTOR***\r\n  const [title, setTitle] = useState(\"\")\r\n  const [author, setAuthor] = useState(\"\")\r\n  const [url, setUrl] = useState(\"\")\r\n  //for login form ***REFACTOR***\r\n  const [username, setUsername] = useState(\"\")\r\n  const [password, setPassword] = useState(\"\")\r\n  const [user, setUser] = useState(null)\r\n  //two strings, one defining the type of notification (\"Error\"/\"Message\") and one with the message contents; allows for color coded response boxes\r\n  //initially set as null, null for conditional rendering of notification message\r\n  const [notification, setNotification] = useState([null,null])\r\n  //***REFACTOR***\r\n  const [loginVisible, setLoginVisible] = useState(false)\r\n  const [blogformVisible, setBlogformVisible] = useState(false)\r\n\r\n\r\n//displays given message to the screen for given time (ms)\r\n  const timeoutNotification = (message, time) =>{\r\n    setNotification(message)\r\n    setTimeout(()=>{\r\n      setNotification([null,null])\r\n    }, time)\r\n  }\r\n//collects blogs from db, sorts by number of likes then updates blogs state to render to page\r\n  const updateBlogs = async () =>{\r\n    const updatedBlogs = await blogService.getAll()\r\n    updatedBlogs.sort((a,b) =>\r\n    b.likes - a.likes)\r\n     setBlogs(updatedBlogs)\r\n  }\r\n\r\n//check to see if user has a valid session open\r\n  useEffect(() =>{\r\n    const user = JSON.parse(window.localStorage.getItem(\"loggedUser\"))\r\n    if (user){\r\n      setUser(user)\r\n      blogService.setToken(user.token)\r\n      timeoutNotification([\"Message\",`Welcome back ${user.name}`],3000)\r\n    }\r\n  },[])\r\n  //get all blogs and display to page\r\n  useEffect(() => {\r\n    updateBlogs()\r\n  }, [])\r\n\r\n\r\n  const clearLoginBox = () =>{\r\n    setUsername(\"\")\r\n    setPassword(\"\")\r\n  }\r\n\r\n  const handleLogin = async event =>{\r\n    event.preventDefault()\r\n    try{\r\n    const user = await loginService.login({username, password})\r\n      //set user state, token and local storage variable\r\n    setUser(user)\r\n    blogService.setToken(user.token)\r\n    window.localStorage.setItem(\"loggedUser\", JSON.stringify(user))\r\n\r\n    clearLoginBox()\r\n    timeoutNotification([\"Message\",`${user.username} logged in successfully`], 2500)\r\n    }\r\n    catch (exception){\r\n      console.log(exception)\r\n      clearLoginBox()\r\n      timeoutNotification([\"Error\",\"Error: Login failed - please try again\"], 2500)\r\n    }\r\n  }\r\n  \r\n\r\n  const handleLogout = async event =>{\r\n    event.preventDefault()\r\n\r\n    setUser(null)\r\n    window.localStorage.removeItem(\"loggedUser\")\r\n    blogService.setToken(\"\")\r\n    timeoutNotification([\"Message\",\"User has logged out\"], 3000)\r\n  }\r\n\r\n  const clearNewBlogBox = () =>{\r\n    setTitle(\"\")\r\n    setAuthor(\"\")\r\n    setUrl(\"\")\r\n  }\r\n\r\n  const saveBlog = async () =>{\r\n    const newBlog = blogService.generateBlog(title, author, url)\r\n    const result = await blogService.create(newBlog)\r\n    return result\r\n  }\r\n\r\n  const handleNewBlog = async event =>{\r\n    event.preventDefault()\r\n    try{\r\n      const result = await saveBlog()\r\n      timeoutNotification([\"Message\",`New blog, ${result.title}, has been saved`], 2500)\r\n\r\n      const returnedBlogs = await blogService.getAll()\r\n\r\n      setBlogs(returnedBlogs)\r\n      clearNewBlogBox()\r\n\r\n    }catch(exception){\r\n      timeoutNotification([\"Error\", exception], 3000)\r\n      clearNewBlogBox()\r\n    }\r\n  }\r\n\r\n  \r\n  const uniStyle = {\r\n    background:\"lightGrey\"\r\n  }\r\n\r\n\r\n  return (\r\n    <div style = {uniStyle}>\r\n      <Notification message = {notification} />\r\n\r\n      {user === null ?\r\n      <>\r\n      <Togglable buttonLabel = {\"login\"}>\r\n\r\n       <LoginForm\r\n         loginVisible = {loginVisible}\r\n         setLoginVisible = {setLoginVisible}\r\n\r\n         usernameState = {username}\r\n         passwordState = {password}\r\n       \r\n         usernameFunction =  {setUsername}\r\n         passwordFunction = {setPassword}\r\n       \r\n          onSubmit = {handleLogin}\r\n       />\r\n      </Togglable>\r\n      <Togglable buttonLabel = {\"new user\"}>\r\n\r\n        <NewUserForm notification = {timeoutNotification}/>\r\n\r\n      </Togglable>\r\n      </>\r\n      :\r\n      <>\r\n      <div>\r\n        <Togglable buttonLabel = {\"create blog\"}>\r\n          <BlogForm\r\n            visible = {blogformVisible}\r\n            setVisible = {setBlogformVisible} \r\n\r\n            titleState = {title}\r\n            authorState = {author}\r\n            urlState = {url}\r\n\r\n            setTitle = {setTitle}\r\n            setAuthor = {setAuthor}\r\n            setUrl = {setUrl}\r\n\r\n            onSubmit = {handleNewBlog} \r\n            />\r\n      </Togglable>\r\n      </div>\r\n      <div>\r\n        <>\r\n          {`${JSON.stringify(user.name)} is logged in`}\r\n          <button\r\n            type = \"submit\"\r\n            onClick = {handleLogout}>\r\n              Logout\r\n          </button>\r\n        </>\r\n        <h2>blogs</h2>\r\n        {blogs.map(blog =>\r\n          <Blog key={blog.id}\r\n          blog={blog}\r\n          updateBlogs = {updateBlogs}\r\n          notification = {timeoutNotification} />\r\n        )}\r\n      </div>\r\n      </>\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}